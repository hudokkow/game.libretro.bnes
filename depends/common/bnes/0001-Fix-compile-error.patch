From 80ae52cae48d0c816e5ac62d987260dc055e534b Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Wed, 27 Jan 2016 12:19:33 -0800
Subject: [PATCH] Fix compile error

Error was:
    error: body of constexpr function '...' not a return-statement

Apparently GCC doesn't properly ignore the enum clause used for compile-time
constants.
---
 nall/bit.hpp | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/nall/bit.hpp b/nall/bit.hpp
index 67a35ad..6fb5148 100755
--- a/nall/bit.hpp
+++ b/nall/bit.hpp
@@ -3,23 +3,23 @@
 
 namespace nall {
   template<int bits> constexpr inline unsigned uclamp(const unsigned x) {
-    enum { y = (1U << (bits - 1)) + ((1U << (bits - 1)) - 1) };
-    return y + ((x - y) & -(x < y));  //min(x, y);
+    return ((1U << (bits - 1)) + ((1U << (bits - 1)) - 1)) +
+               ((x - ((1U << (bits - 1)) + ((1U << (bits - 1)) - 1))) &
+                   -(x < ((1U << (bits - 1)) + ((1U << (bits - 1)) - 1))));  //min(x, y);
   }
 
   template<int bits> constexpr inline unsigned uclip(const unsigned x) {
-    enum { m = (1U << (bits - 1)) + ((1U << (bits - 1)) - 1) };
-    return (x & m);
+    return (x & ((1U << (bits - 1)) + ((1U << (bits - 1)) - 1)));
   }
 
   template<int bits> constexpr inline signed sclamp(const signed x) {
-    enum { b = 1U << (bits - 1), m = (1U << (bits - 1)) - 1 };
-    return (x > m) ? m : (x < -b) ? -b : x;
+    return (x > ((1U << (bits - 1)) - 1)) ?
+               ((1U << (bits - 1)) - 1) :
+                   (x < -(1U << (bits - 1))) ? -(1U << (bits - 1)) : x;
   }
 
   template<int bits> constexpr inline signed sclip(const signed x) {
-    enum { b = 1U << (bits - 1), m = (1U << bits) - 1 };
-    return ((x & m) ^ b) - b;
+    return ((x & ((1U << bits) - 1)) ^ (1U << (bits - 1))) - (1U << (bits - 1));
   }
 
   namespace bit {
-- 
2.5.0

